//@version=4
strategy(title = "RMO Strategy [LazyBear]", shorttitle="RMO_Strategy_LB", overlay=false)

C = close
exit_bars = input(10, "Exit After N Bars", minval=1)

cm2(x) => sma(x, 2)

ma1 = cm2(C)
ma2 = cm2(ma1)
ma3 = cm2(ma2)
ma4 = cm2(ma3)
ma5 = cm2(ma4)
ma6 = cm2(ma5)
ma7 = cm2(ma6)
ma8 = cm2(ma7)
ma9 = cm2(ma8)
ma10 = cm2(ma9)

avg_ma = (ma1 + ma2 + ma3 + ma4 + ma5 + ma6 + ma7 + ma8 + ma9 + ma10) / 10

SwingTrd1 = 100 * (close - avg_ma) / (highest(C, 10) - lowest(C, 10))
SwingTrd2 = ema(SwingTrd1, 30)
SwingTrd3 = ema(SwingTrd2, 30)
RMO = ema(SwingTrd1, 81)

Bull_Trend = RMO > 0
Bear_Trend = RMO < 0

// Entry Conditions
long_condition = crossover(SwingTrd2, SwingTrd3) and Bull_Trend
short_condition = crossunder(SwingTrd2, SwingTrd3) and Bear_Trend

// Bar index tracking
var int long_entry_bar = na
var int short_entry_bar = na

if (long_condition)
    strategy.entry("Long", strategy.long)
    strategy.exit("TP/SL Long", from_entry="Long", limit=close * (1 + {{TP}} / 100), stop=close * (1 - {{SL}} / 100))
    long_entry_bar := bar_index

if (short_condition)
    strategy.entry("Short", strategy.short)
    strategy.exit("TP/SL Short", from_entry="Short", limit=close * (1 - {{TP}} / 100), stop=close * (1 + {{SL}} / 100))
    short_entry_bar := bar_index

// Exit after N bars
if (strategy.position_size > 0 and not na(long_entry_bar) and bar_index - long_entry_bar >= exit_bars)
    strategy.close("Long")
    long_entry_bar := na

if (strategy.position_size < 0 and not na(short_entry_bar) and bar_index - short_entry_bar >= exit_bars)
    strategy.close("Short")
    short_entry_bar := na

// Plot RMO oscillator
plot(RMO, color=color.gray, style=plot.style_histogram)
hline(0)
