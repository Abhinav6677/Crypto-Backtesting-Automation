//@version=5
strategy("RSI/MFI with Volatility Bands Strategy [LazyBear]", overlay=false, default_qty_type=strategy.percent_of_equity, default_qty_value=100)

// === INPUTS ===
source = hlc3
length = input.int(14, minval=1, title="Length")
mult = input.float(2.0, minval=0.001, maxval=50, title="Band Multiplier")
DrawRSI_f = input.bool(false, title="Draw RSI?")
DrawMFI_f = input.bool(true, title="Draw MFI?")
HighlightBreaches = input.bool(true, title="Highlight Oversold/Overbought?")

// === LOGIC TO SELECT WHICH INDICATOR TO USE ===
DrawMFI = (not DrawMFI_f) and (not DrawRSI_f) ? true : DrawMFI_f
DrawRSI = (DrawMFI_f and DrawRSI_f) ? false : DrawRSI_f

// === CALCULATE INDICATORS ===
// RSI
rsi_s = DrawRSI ? ta.rsi(source, length) : na

// MFI (custom implementation)
up_vol = DrawMFI ? volume * (ta.change(source) > 0 ? source : 0) : na
down_vol = DrawMFI ? volume * (ta.change(source) < 0 ? source : 0) : na
up_sum = DrawMFI ? math.sum(up_vol, length) : na
down_sum = DrawMFI ? math.sum(down_vol, length) : na
mf = DrawMFI ? 100 - (100 / (1 + (up_sum / down_sum))) : na

// Selected Indicator Series
bb_s = DrawRSI ? rsi_s : DrawMFI ? mf : na

// Bollinger Bands
basis = ta.sma(bb_s, length)
dev = mult * ta.stdev(bb_s, length)
upper = basis + dev
lower = basis - dev

// === STRATEGY LOGIC ===
longCondition = ta.crossunder(bb_s, lower)
shortCondition = ta.crossover(bb_s, upper)

if (longCondition)
    strategy.entry("Long", strategy.long)

long_tp = close * (1 + {{TP}} / 100)
long_sl = close * (1 - {{SL}} / 100)
strategy.exit("Exit Long", from_entry="Long", limit=long_tp, stop=long_sl)

if (shortCondition)
    strategy.close("Long")

// === PLOTS ===
plot(DrawRSI ? rsi_s : na, color=color.maroon, title="RSI", linewidth=2)
plot(DrawMFI ? mf : na, color=color.green, title="MFI", linewidth=2)
plot(basis, color=color.red, title="Basis")
p1 = plot(upper, color=color.blue, title="Upper Band")
p2 = plot(lower, color=color.blue, title="Lower Band")
fill(p1, p2, color=color.new(color.blue, 85))

// Background color
b_color = (bb_s > upper) ? color.red : (bb_s < lower) ? color.green : na
bgcolor(HighlightBreaches ? b_color : na)
