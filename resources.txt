DRIVER_PATH = r"D:\edgedriver_win64\msedgedriver.exe"
EDGE_BINARY = r"C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe"
PROFILE_DIR = r"D:\Internship data\New folder\super_mirror\edge_profile"


import os
import time
import pyperclip
import mss
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.edge.service import Service
from selenium.webdriver.edge.options import Options

TP_SL_COMBINATIONS = [
    (5, 5),
    (10, 5),
    (15, 10),
    # Add more as needed
]

OUTPUT_BASE_DIR = os.path.abspath("reports")

# === CONFIGURATION ===
DRIVER_PATH = r"D:\edgedriver_win64\msedgedriver.exe"
EDGE_BINARY = r"C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe"
PROFILE_DIR = r"D:\Internship data\New folder\super_mirror\edge_profile"
SCRIPTS_DIR = os.path.abspath("scripts")
TRADINGVIEW_URL = "https://www.tradingview.com/chart"

# === BROWSER SETUP ===
def setup_browser():
    options = Options()
    options.binary_location = EDGE_BINARY
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_argument("--start-maximized")
    options.add_argument(f"--user-data-dir={PROFILE_DIR}")
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    return webdriver.Edge(service=Service(DRIVER_PATH), options=options)

# === LOAD SCRIPTS ===
def load_scripts(directory):
    if not os.path.isdir(directory):
        raise FileNotFoundError(f"Scripts directory '{directory}' does not exist.")
    files = sorted([f for f in os.listdir(directory) if f.lower().endswith('.txt')])
    return [os.path.join(directory, f) for f in files]

# === HANDLE LOGIN ===
def login_if_needed(driver, wait):
    try:
        wait.until(EC.presence_of_element_located((By.XPATH, "//span[text()='Pine Editor']")), timeout=10)
        print("Already logged in.")
    except Exception:
        print("Please log in manually.")
        input("After logging in, press Enter to continue...")
        driver.get(TRADINGVIEW_URL)
        wait.until(EC.presence_of_element_located((By.XPATH, "//span[text()='Pine Editor']")))

# === OPEN PINE EDITOR ===
def open_pine_editor(driver, wait):
    print("Opening Pine Editor...")

    # Check if the Monaco editor is already present
    editor_elements = driver.find_elements(By.CSS_SELECTOR, "div.monaco-editor")
    visible_editors = [e for e in editor_elements if e.is_displayed()]
    if visible_editors:
        print("Pine Editor already visible.")
        editor_div = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "div.monaco-editor")))
        editor_div.click()
        textarea = editor_div.find_element(By.TAG_NAME, "textarea")
        return textarea
    else:
        print("Pine Editor not visible, clicking the tab.")
        # Click the Pine Editor button
        pine_editor_btn = wait.until(EC.element_to_be_clickable((By.XPATH, "//span[text()='Pine Editor']")))
        pine_editor_btn.click()
        time.sleep(2)  # Let it load

        # Wait and grab the editor
        editor_div = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "div.monaco-editor")))
        editor_div.click()
        textarea = editor_div.find_element(By.TAG_NAME, "textarea")
        return textarea    

def modify_code(code, tp, sl):
    code = code.replace("{{TP}}", str(tp))
    code = code.replace("{{SL}}", str(sl))
    return code

# === PASTE CODE TO EDITOR ===
def paste_code(textarea, code, actions):
    print("Deleting existing code")
    textarea.send_keys(Keys.CONTROL, 'a')
    textarea.send_keys(Keys.BACKSPACE)
    time.sleep(0.2)
    
    print("pasting code")
    pyperclip.copy(code)
    actions.key_down(Keys.CONTROL).send_keys('v').key_up(Keys.CONTROL).perform()
    time.sleep(0.5)

# === SAVE AND ADD TO CHART ===
def save_and_add_to_chart(driver):
    actions = ActionChains(driver)
    actions.key_down(Keys.CONTROL).send_keys('s').key_up(Keys.CONTROL).perform()
    time.sleep(1.5)
    actions.key_down(Keys.CONTROL).send_keys(Keys.RETURN).key_up(Keys.CONTROL).perform()
    print("Script saved and added to chart.")


# === GENERATE STRATEGY REPORT ===
def generate_strategy_report(driver, wait):
    print("Opening Strategy Tester...")
    wait.until(EC.element_to_be_clickable((By.XPATH, "//span[text()='Strategy Tester']"))).click()
    time.sleep(2)
    wait.until(EC.element_to_be_clickable((By.XPATH, "//span[text()='Generate report']"))).click()
    time.sleep(1)
    
    try:
        # Locate the outer container first
        report_container = driver.find_element(By.CSS_SELECTOR, "div[class^='reportContainer-']")

        # Then search inside it
        pnl_elements = report_container.find_elements(By.CSS_SELECTOR, "div[class^='highlightedValue-']")
        roi_elements = report_container.find_elements(By.CSS_SELECTOR, "div[class^='change-']")
        pf_elements = report_container.find_elements(By.CSS_SELECTOR, "div[class^='value-']")

        # Extract text cleanly
        pnl = [el.text.strip() for el in pnl_elements if el.text.strip()]
        roi = [el.text.strip() for el in roi_elements if el.text.strip()]
        pf = [el.text.strip() for el in pf_elements if el.text.strip()]

        print("üìä Extracted Report Stats (from report container):")
        print("  üí∞ PnL:", pnl)
        print("  üìà ROI:", roi)
        print("  üìä Values:", pf)

        return {"PnL": pnl, "ROI": roi, "Values": pf}

    except Exception as e:
        print("‚ùå Failed to extract report values:", e)
        return {"PnL": [], "ROI": [], "Values": []}
    
  
# === TAKE SCREENSHOT ===
def take_screenshot(filename="strategy_report.png"):
    with mss.mss() as sct:
        sct.shot(output=filename)
        print(f"Saved screenshot: {filename}")

# === MAIN AUTOMATION ===
def main():
    driver = setup_browser()
    wait = WebDriverWait(driver, 30)
    driver.get(TRADINGVIEW_URL)
    actions = ActionChains(driver)
    print("Loaded")
    try:
        # login_if_needed(driver, wait)
        scripts = load_scripts(SCRIPTS_DIR)
        if not scripts:
            print("No .txt files found.")
            return

        for idx, script_path in enumerate(scripts, 1):
            script_name = os.path.splitext(os.path.basename(script_path))[0]
            
            with open(script_path, 'r', encoding='utf-8') as f:
                base_code = f.read()

            for tp, sl in TP_SL_COMBINATIONS:
                print(f"\n[{script_name}] Processing TP={tp}, SL={sl}")
                code = modify_code(base_code, tp, sl)

                textarea = open_pine_editor(driver, wait)
                print("Editor loaded")
                paste_code(textarea, code, actions)
                print("saving and adding to chart")
                save_and_add_to_chart(driver)
                print(generate_strategy_report(driver, wait))
                time.sleep(10)

                # Create output dir
                combo_dir = os.path.join(OUTPUT_BASE_DIR, f"TP{tp}_SL{sl}")
                os.makedirs(combo_dir, exist_ok=True)

                screenshot_filename = os.path.join(combo_dir, f"{script_name}_report.png")
                take_screenshot(screenshot_filename)
                time.sleep(2)

        print("\nAll scripts processed.")

    except Exception as e:
        print(f"\n‚ùå Error occurred: {e}")
    finally:
        try:
            driver.quit()
        except Exception:
            pass

# === RUN SCRIPT ===
if __name__ == "__main__":
    main()
















new working 







import os
import time
import csv
import pyperclip
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.edge.service import Service
from selenium.webdriver.edge.options import Options

TP_SL_COMBINATIONS = [
    (5, 5),
    (10, 5),
    (15, 10),
    # Add more as needed
]

OUTPUT_BASE_DIR = os.path.abspath("reports")

# === CONFIGURATION ===
DRIVER_PATH = r"D:\edgedriver_win64\msedgedriver.exe"
EDGE_BINARY = r"C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe"
PROFILE_DIR = r"D:\Internship data\New folder\super_mirror\edge_profile"
SCRIPTS_DIR = os.path.abspath("scripts")
TRADINGVIEW_URL = "https://www.tradingview.com/chart"

# === BROWSER SETUP ===
def setup_browser():
    options = Options()
    options.binary_location = EDGE_BINARY
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_argument("--start-maximized")
    options.add_argument(f"--user-data-dir={PROFILE_DIR}")
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    return webdriver.Edge(service=Service(DRIVER_PATH), options=options)

# === LOAD SCRIPTS ===
def load_scripts(directory):
    if not os.path.isdir(directory):
        raise FileNotFoundError(f"Scripts directory '{directory}' does not exist.")
    files = sorted([f for f in os.listdir(directory) if f.lower().endswith('.txt')])
    return [os.path.join(directory, f) for f in files]

# === OPEN PINE EDITOR ===
def open_pine_editor(driver, wait):
    print("Opening Pine Editor...")
    editor_elements = driver.find_elements(By.CSS_SELECTOR, "div.monaco-editor")
    visible_editors = [e for e in editor_elements if e.is_displayed()]
    if visible_editors:
        print("Pine Editor already visible.")
        editor_div = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "div.monaco-editor")))
        editor_div.click()
        textarea = editor_div.find_element(By.TAG_NAME, "textarea")
        return textarea
    else:
        print("Pine Editor not visible, clicking the tab.")
        pine_editor_btn = wait.until(EC.element_to_be_clickable((By.XPATH, "//span[text()='Pine Editor']")))
        pine_editor_btn.click()
        time.sleep(2)
        editor_div = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "div.monaco-editor")))
        editor_div.click()
        textarea = editor_div.find_element(By.TAG_NAME, "textarea")
        return textarea

def modify_code(code, tp, sl):
    code = code.replace("{{TP}}", str(tp))
    code = code.replace("{{SL}}", str(sl))
    return code

# === PASTE CODE TO EDITOR ===
def paste_code(textarea, code, actions):
    print("Deleting existing code")
    textarea.send_keys(Keys.CONTROL, 'a')
    textarea.send_keys(Keys.BACKSPACE)
    time.sleep(0.2)
    print("Pasting code")
    pyperclip.copy(code)
    actions.key_down(Keys.CONTROL).send_keys('v').key_up(Keys.CONTROL).perform()
    time.sleep(0.5)

# === SAVE AND ADD TO CHART ===
def save_and_add_to_chart(driver, actions, wait):
    try:
        print("Pressing Ctrl + Enter to add script to chart...")
        actions.key_down(Keys.CONTROL).send_keys(Keys.ENTER).key_up(Keys.CONTROL).perform()
        time.sleep(2)
        print("‚úÖ Script added to chart using Ctrl + Enter.")
    except Exception as e:
        print("‚ùå Failed to send Ctrl + Enter:", e)
        
    
        
def generate_strategy_report_first(driver, wait):
    # print("Opening Strategy Tester...")
    # wait.until(EC.element_to_be_clickable((By.XPATH, "//span[text()='Strategy Tester']"))).click()
    # time.sleep(2)
    wait.until(EC.element_to_be_clickable((By.XPATH, "//span[text()='Generate report']"))).click()
    time.sleep(3)
    
    try:
        report = {}

        # Get the Strategy Tester Panel
        container = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "div[class^='reportContainer-']")))

        # Total PnL & ROI
        pnl_block = container.find_element(By.XPATH, ".//div[contains(text(), 'Total P&L')]/following-sibling::div[1]")
        spans = pnl_block.find_elements(By.TAG_NAME, "span")
        report["PnL"] = pnl_block.text.replace(spans[0].text, "").strip()
        report["ROI"] = spans[0].text.strip()

        # Profit Factor
        profit_factor_elem = container.find_element(By.XPATH, ".//div[contains(text(), 'Profit factor')]/following-sibling::div[1]")
        report["Profit Factor"] = profit_factor_elem.text.strip()

        # Win Rate
        win_rate_elem = container.find_element(By.XPATH, ".//div[contains(text(), 'Profitable trades')]/following-sibling::div[1]")
        report["Win Rate"] = win_rate_elem.text.strip()

        print("üìä Extracted:", report)
        return report

    except Exception as e:
        print("‚ùå Failed to extract strategy metrics:", e)
        return {
            "PnL": "",
            "ROI": "",
            "Profit Factor": "",
            "Win Rate": ""
        }




# === GENERATE STRATEGY REPORT ===
def generate_strategy_report(driver, wait):
    print("Opening Strategy Tester...")
    wait.until(EC.element_to_be_clickable((By.XPATH, "//span[text()='Strategy Tester']"))).click()
    time.sleep(2)
    wait.until(EC.element_to_be_clickable((By.XPATH, "//span[text()='Generate report']"))).click()
    time.sleep(3)
    
    try:
        report = {}

        # Get the Strategy Tester Panel
        container = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "div[class^='reportContainer-']")))

        # Total PnL & ROI
        pnl_block = container.find_element(By.XPATH, ".//div[contains(text(), 'Total P&L')]/following-sibling::div[1]")
        spans = pnl_block.find_elements(By.TAG_NAME, "span")
        report["PnL"] = pnl_block.text.replace(spans[0].text, "").strip()
        report["ROI"] = spans[0].text.strip()

        # Profit Factor
        profit_factor_elem = container.find_element(By.XPATH, ".//div[contains(text(), 'Profit factor')]/following-sibling::div[1]")
        report["Profit Factor"] = profit_factor_elem.text.strip()

        # Win Rate
        win_rate_elem = container.find_element(By.XPATH, ".//div[contains(text(), 'Profitable trades')]/following-sibling::div[1]")
        report["Win Rate"] = win_rate_elem.text.strip()

        print("üìä Extracted:", report)
        return report

    except Exception as e:
        print("‚ùå Failed to extract strategy metrics:", e)
        return {
            "PnL": "",
            "ROI": "",
            "Profit Factor": "",
            "Win Rate": ""
        }



# === MAIN AUTOMATION ===
def main():
    driver = setup_browser()
    wait = WebDriverWait(driver, 30)
    driver.get(TRADINGVIEW_URL)
    actions = ActionChains(driver)
    print("Loaded")

    try:
        scripts = load_scripts(SCRIPTS_DIR)
        if not scripts:
            print("No .txt files found.")
            return

        for script_path in scripts:
            script_name = os.path.splitext(os.path.basename(script_path))[0]

            with open(script_path, 'r', encoding='utf-8') as f:
                base_code = f.read()
            
            flag = True

            for tp, sl in TP_SL_COMBINATIONS:
                print(f"\n[{script_name}] Processing TP={tp}, SL={sl}")
                code = modify_code(base_code, tp, sl)

                textarea = open_pine_editor(driver, wait)
                paste_code(textarea, code, actions)
        
                if(flag):
                    save_and_add_to_chart(driver,actions,wait)
                    report = generate_strategy_report_first(driver, wait)
                    time.sleep(5)
                    flag= False
                else:
                    report = generate_strategy_report(driver, wait)
                    time.sleep(5)

                combo_dir = os.path.join(OUTPUT_BASE_DIR, f"TP{tp}_SL{sl}")
                os.makedirs(combo_dir, exist_ok=True)

                csv_filename = os.path.join(combo_dir, f"TP{tp}_SL{sl}.csv")
                file_exists = os.path.isfile(csv_filename)

                with open(csv_filename, mode='a', newline='', encoding='utf-8') as f:
                    writer = csv.writer(f)
                    if not file_exists:
                        writer.writerow(["Script", "TP", "SL", "PnL", "ROI", "Profit Factor", "Win Rate"])
                    writer.writerow([
                        script_name, tp, sl,
                        report["PnL"], report["ROI"],
                        report["Profit Factor"], report["Win Rate"]
                    ])
                print(f"‚úÖ Appended to CSV: {csv_filename}")


        print("\n‚úÖ All scripts processed successfully.")

    except Exception as e:
        print(f"\n‚ùå Error occurred: {e}")
    finally:
        try:
            driver.quit()
        except Exception:
            pass

# === RUN SCRIPT ===
if __name__ == "__main__":
    main()
















3rd try of code for ss with my own Logic

import os
import time
import pyperclip
import mss
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.edge.service import Service
from selenium.webdriver.edge.options import Options

TP_SL_COMBINATIONS = [
    (5, 5),
    (10, 5),
    (15, 10),
    # Add more as needed
]

OUTPUT_BASE_DIR = os.path.abspath("reports")

# === CONFIGURATION ===
DRIVER_PATH = r"D:\edgedriver_win64\msedgedriver.exe"
EDGE_BINARY = r"C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe"
PROFILE_DIR = r"D:\Internship data\New folder\super_mirror\edge_profile"
SCRIPTS_DIR = os.path.abspath("scripts")
TRADINGVIEW_URL = "https://www.tradingview.com/chart"

# === BROWSER SETUP ===
def setup_browser():
    options = Options()
    options.binary_location = EDGE_BINARY
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_argument("--start-maximized")
    options.add_argument(f"--user-data-dir={PROFILE_DIR}")
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    return webdriver.Edge(service=Service(DRIVER_PATH), options=options)

# === LOAD SCRIPTS ===
def load_scripts(directory):
    if not os.path.isdir(directory):
        raise FileNotFoundError(f"Scripts directory '{directory}' does not exist.")
    files = sorted([f for f in os.listdir(directory) if f.lower().endswith('.txt')])
    return [os.path.join(directory, f) for f in files]

# === HANDLE LOGIN ===
def login_if_needed(driver, wait):
    try:
        wait.until(EC.presence_of_element_located((By.XPATH, "//span[text()='Pine Editor']")), timeout=10)
        print("Already logged in.")
    except Exception:
        print("Please log in manually.")
        input("After logging in, press Enter to continue...")
        driver.get(TRADINGVIEW_URL)
        wait.until(EC.presence_of_element_located((By.XPATH, "//span[text()='Pine Editor']")))

# === OPEN PINE EDITOR ===
def open_pine_editor(driver, wait):
    print("Opening Pine Editor...")

    # Check if the Monaco editor is already present
    editor_elements = driver.find_elements(By.CSS_SELECTOR, "div.monaco-editor")
    visible_editors = [e for e in editor_elements if e.is_displayed()]
    if visible_editors:
        print("Pine Editor already visible.")
        editor_div = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "div.monaco-editor")))
        editor_div.click()
        textarea = editor_div.find_element(By.TAG_NAME, "textarea")
        return textarea
    else:
        print("Pine Editor not visible, clicking the tab.")
        # Click the Pine Editor button
        pine_editor_btn = wait.until(EC.element_to_be_clickable((By.XPATH, "//span[text()='Pine Editor']")))
        pine_editor_btn.click()
        time.sleep(2)  # Let it load

        # Wait and grab the editor
        editor_div = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "div.monaco-editor")))
        editor_div.click()
        textarea = editor_div.find_element(By.TAG_NAME, "textarea")
        return textarea    

def modify_code(code, tp, sl):
    code = code.replace("{{TP}}", str(tp))
    code = code.replace("{{SL}}", str(sl))
    return code

# === PASTE CODE TO EDITOR ===
# def paste_code(textarea, code, actions):
#     print("Deleting existing code")
#     textarea.send_keys(Keys.CONTROL, 'a')
#     textarea.send_keys(Keys.BACKSPACE)
#     time.sleep(0.2)
    
#     print("pasting code")
#     pyperclip.copy(code)
#     actions.key_down(Keys.CONTROL).send_keys('v').key_up(Keys.CONTROL).perform()
#     time.sleep(0.5)

def paste_code(textarea, code, actions):
    print("Deleting existing code")
    textarea.send_keys(Keys.CONTROL, 'a')
    textarea.send_keys(Keys.BACKSPACE)
    time.sleep(0.2)

    # Confirm code is cleared before pasting
    existing = textarea.get_attribute("value")
    if existing.strip() != "":
        print("‚ùå Code not cleared. Retrying...")
        textarea.send_keys(Keys.CONTROL, 'a')
        textarea.send_keys(Keys.BACKSPACE)
        time.sleep(0.2)

    print("Pasting code")
    pyperclip.copy(code)
    actions.key_down(Keys.CONTROL).send_keys('v').key_up(Keys.CONTROL).perform()
    time.sleep(0.5)


# === SAVE AND ADD TO CHART ===
def save_and_add_to_chart(driver, actions, wait):
    actions = ActionChains(driver)
    actions.key_down(Keys.CONTROL).send_keys('s').key_up(Keys.CONTROL).perform()
    time.sleep(1.5)
    actions.key_down(Keys.CONTROL).send_keys(Keys.RETURN).key_up(Keys.CONTROL).perform()
    print("Script saved and added to chart.")

# === GENERATE STRATEGY REPORT ===
def generate_strategy_report_first(driver, wait):
    # print("Opening Strategy Tester...")
    # wait.until(EC.element_to_be_clickable((By.XPATH, "//span[text()='Strategy Tester']"))).click()
    # time.sleep(2)
    wait.until(EC.element_to_be_clickable((By.XPATH, "//span[text()='Generate report']"))).click()
    time.sleep(3)
    
    try:
        report = {}

        # Get the Strategy Tester Panel
        container = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "div[class^='reportContainer-']")))

        # Total PnL & ROI
        pnl_block = container.find_element(By.XPATH, ".//div[contains(text(), 'Total P&L')]/following-sibling::div[1]")
        spans = pnl_block.find_elements(By.TAG_NAME, "span")
        report["PnL"] = pnl_block.text.replace(spans[0].text, "").strip()
        report["ROI"] = spans[0].text.strip()

        # Profit Factor
        profit_factor_elem = container.find_element(By.XPATH, ".//div[contains(text(), 'Profit factor')]/following-sibling::div[1]")
        report["Profit Factor"] = profit_factor_elem.text.strip()

        # Win Rate
        win_rate_elem = container.find_element(By.XPATH, ".//div[contains(text(), 'Profitable trades')]/following-sibling::div[1]")
        report["Win Rate"] = win_rate_elem.text.strip()

        print("üìä Extracted:", report)
        return report

    except Exception as e:
        print("‚ùå Failed to extract strategy metrics:", e)
        return {
            "PnL": "",
            "ROI": "",
            "Profit Factor": "",
            "Win Rate": ""
        }




# === GENERATE STRATEGY REPORT ===
def generate_strategy_report(driver, wait):
    print("Opening Strategy Tester...")
    wait.until(EC.element_to_be_clickable((By.XPATH, "//span[text()='Strategy Tester']"))).click()
    time.sleep(2)
    wait.until(EC.element_to_be_clickable((By.XPATH, "//span[text()='Generate report']"))).click()
    time.sleep(3)
    
    try:
        report = {}

        # Get the Strategy Tester Panel
        container = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "div[class^='reportContainer-']")))

        # Total PnL & ROI
        pnl_block = container.find_element(By.XPATH, ".//div[contains(text(), 'Total P&L')]/following-sibling::div[1]")
        spans = pnl_block.find_elements(By.TAG_NAME, "span")
        report["PnL"] = pnl_block.text.replace(spans[0].text, "").strip()
        report["ROI"] = spans[0].text.strip()

        # Profit Factor
        profit_factor_elem = container.find_element(By.XPATH, ".//div[contains(text(), 'Profit factor')]/following-sibling::div[1]")
        report["Profit Factor"] = profit_factor_elem.text.strip()

        # Win Rate
        win_rate_elem = container.find_element(By.XPATH, ".//div[contains(text(), 'Profitable trades')]/following-sibling::div[1]")
        report["Win Rate"] = win_rate_elem.text.strip()

        print("üìä Extracted:", report)
        return report

    except Exception as e:
        print("‚ùå Failed to extract strategy metrics:", e)
        return {
            "PnL": "",
            "ROI": "",
            "Profit Factor": "",
            "Win Rate": ""
        }
    
    
# === TAKE SCREENSHOT ===
def take_screenshot(filename="strategy_report.png"):
    with mss.mss() as sct:
        sct.shot(output=filename)
        print(f"Saved screenshot: {filename}")

# === MAIN AUTOMATION ===
def main():
    driver = setup_browser()
    wait = WebDriverWait(driver, 30)
    driver.get(TRADINGVIEW_URL)
    actions = ActionChains(driver)
    print("Loaded")
    try:
        # login_if_needed(driver, wait)
        scripts = load_scripts(SCRIPTS_DIR)
        if not scripts:
            print("No .txt files found.")
            return

        for idx, script_path in enumerate(scripts, 1):
            script_name = os.path.splitext(os.path.basename(script_path))[0]
            
            with open(script_path, 'r', encoding='utf-8') as f:
                base_code = f.read()
            
            flag = True

            for tp, sl in TP_SL_COMBINATIONS:
                print(f"\n[{script_name}] Processing TP={tp}, SL={sl}")
                code = modify_code(base_code, tp, sl)
                
                # Click "New Script" to clear previous Pine script
                try:
                    new_script_btn = wait.until(EC.element_to_be_clickable((By.XPATH, "//span[text()='New Script']")))
                    new_script_btn.click()
                    print("Clicked 'New Script' to start with a fresh editor.")
                    time.sleep(1)  # Allow the editor to load
                except Exception as e:
                    print("‚ö†Ô∏è Failed to click 'New Script':", e)


                textarea = open_pine_editor(driver, wait)
                print("Editor loaded")
                paste_code(textarea, code, actions)
                print("saving and adding to chart")
                if(flag):
                    save_and_add_to_chart(driver,actions,wait)
                    report = generate_strategy_report_first(driver, wait)
                    time.sleep(5)
                    flag= False
                else:
                    report = generate_strategy_report(driver, wait)
                    time.sleep(5)
                # Create output dir
                combo_dir = os.path.join(OUTPUT_BASE_DIR, f"TP{tp}_SL{sl}")
                os.makedirs(combo_dir, exist_ok=True)

                screenshot_filename = os.path.join(combo_dir, f"{script_name}_report.png")
                take_screenshot(screenshot_filename)
                time.sleep(2)

        print("\nAll scripts processed.")

    except Exception as e:
        print(f"\n‚ùå Error occurred: {e}")
    finally:
        try:
            driver.quit()
        except Exception:
            pass

# === RUN SCRIPT ===
if __name__ == "__main__":
    main()
























# import os
# import time
# import pyperclip
# import shutil
# import glob
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.common.keys import Keys
# from selenium.webdriver.common.action_chains import ActionChains
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.edge.service import Service
# from selenium.webdriver.edge.options import Options

# TP_SL_COMBINATIONS = [
#     (5, 5),
#     (10, 5),
#     (15, 10),
# ]

# OUTPUT_BASE_DIR = os.path.abspath("reports")
# DOWNLOAD_DIR = os.path.abspath("downloads")

# DRIVER_PATH = r"D:\edgedriver_win64\msedgedriver.exe"
# EDGE_BINARY = r"C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe"
# PROFILE_DIR = r"D:\Internship data\New folder\super_mirror\edge_profile"
# SCRIPTS_DIR = os.path.abspath("scripts")
# TRADINGVIEW_URL = "https://www.tradingview.com/chart"
# DROPDOWN_XPATH = "/html/body/div[2]/div/div[7]/div[2]/div[4]/div/div/div/div[1]/div[1]/div"
# EXPORT_DATA_XPATH = "/html/body/div[6]/div[2]/div/div/div/div[1]/div/div[2]/div/div[3]/div/div"

# # Create directories if they don't exist
# os.makedirs(DOWNLOAD_DIR, exist_ok=True)
# os.makedirs(OUTPUT_BASE_DIR, exist_ok=True)

# def setup_browser():
#     options = Options()
#     options.binary_location = EDGE_BINARY
#     options.add_argument("--disable-blink-features=AutomationControlled")
#     options.add_argument("--start-maximized")
#     options.add_argument(f"--user-data-dir={PROFILE_DIR}")
#     options.add_experimental_option("excludeSwitches", ["enable-automation"])
#     prefs = {
#         "download.default_directory": DOWNLOAD_DIR,
#         "download.prompt_for_download": False,
#         "download.directory_upgrade": True,
#         "safebrowsing.enabled": True
#     }
#     options.add_experimental_option("prefs", prefs)
#     return webdriver.Edge(service=Service(DRIVER_PATH), options=options)

# def load_scripts(directory):
#     if not os.path.isdir(directory):
#         raise FileNotFoundError(f"Scripts directory '{directory}' does not exist.")
#     return sorted([os.path.join(directory, f) for f in os.listdir(directory) if f.endswith(".txt")])

# def open_pine_editor(driver, wait):
#     print("Opening Pine Editor...")
#     try:
#         # Try to find visible editor first
#         editor_elements = driver.find_elements(By.CSS_SELECTOR, "div.monaco-editor")
#         visible_editors = [e for e in editor_elements if e.is_displayed()]
        
#         if visible_editors:
#             editor_div = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "div.monaco-editor")))
#             editor_div.click()
#             return editor_div.find_element(By.TAG_NAME, "textarea")
#     except:
#         pass
    
#     # If no visible editor, open Pine Editor tab
#     pine_tab = wait.until(EC.element_to_be_clickable((By.XPATH, "//span[text()='Pine Editor']")))
#     pine_tab.click()
#     time.sleep(2)
#     editor_div = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "div.monaco-editor")))
#     editor_div.click()
#     return editor_div.find_element(By.TAG_NAME, "textarea")

# def modify_code(code, tp, sl):
#     return code.replace("{{TP}}", str(tp)).replace("{{SL}}", str(sl))

# def paste_code(textarea, code, actions):
#     textarea.send_keys(Keys.CONTROL + 'a')
#     textarea.send_keys(Keys.BACKSPACE)
#     pyperclip.copy(code)
#     actions.key_down(Keys.CONTROL).send_keys('v').key_up(Keys.CONTROL).perform()
#     time.sleep(1)

# def save_and_add_to_chart(driver, actions):
#     print("Pressing Ctrl + Enter to compile...")
#     actions.key_down(Keys.CONTROL).send_keys(Keys.ENTER).key_up(Keys.CONTROL).perform()
#     time.sleep(3)
    
#     # Wait for strategy to be added to chart
#     try:
#         WebDriverWait(driver, 10).until(
#             EC.presence_of_element_located((By.CSS_SELECTOR, "div[data-name='legend-source-title']"))
#         )
#     except:
#         print("Warning: Strategy might not have been added to chart")

# def export_strategy_report(driver, combo_dir, script_name, timeout=30):
#     """Export report using provided XPaths and save to organized location"""
#     wait = WebDriverWait(driver, timeout)
    
#     try:
#         print("Opening strategy dropdown...")
#         # Scroll to top to ensure elements are in view
#         driver.execute_script("window.scrollTo(0, 0);")
#         time.sleep(1)
        
#         # 1. Click dropdown
#         dropdown = wait.until(EC.element_to_be_clickable((By.XPATH, DROPDOWN_XPATH)))
#         driver.execute_script("arguments[0].scrollIntoView({behavior: 'auto', block: 'center', inline: 'center'});", dropdown)
#         driver.execute_script("arguments[0].click();", dropdown)
#         print("‚úÖ Strategy dropdown clicked")
#         time.sleep(1.5)  # Allow menu animation

#         print("Clicking export option...")
#         # 2. Click export data option
#         export_option = wait.until(EC.element_to_be_clickable((By.XPATH, EXPORT_DATA_XPATH)))
#         driver.execute_script("arguments[0].scrollIntoView({behavior: 'auto', block: 'center', inline: 'center'});", export_option)
#         driver.execute_script("arguments[0].click();", export_option)
#         print("‚úÖ Export data option clicked")
#         time.sleep(2)  # Allow dialog to appear

#         print("Confirming export...")
#         # 3. Confirm export in dialog
#         confirm_btn = wait.until(EC.element_to_be_clickable(
#             (By.XPATH, "//button[.//span[text()='Export']]")
#         ))
#         driver.execute_script("arguments[0].click();", confirm_btn)
#         print("‚úÖ Export confirmed")
        
#         # 4. Wait for download and move file
#         time.sleep(3)  # Initial pause for download start
#         return move_downloaded_file(combo_dir, script_name)
        
#     except Exception as e:
#         print(f"‚ùå Export failed: {e}")
#         try:
#             error_dir = os.path.dirname(combo_dir) if combo_dir else OUTPUT_BASE_DIR
#             driver.save_screenshot(os.path.join(error_dir, f"export_error_{int(time.time())}.png"))
#         except:
#             print("Couldn't save screenshot")
#         return False

# def move_downloaded_file(combo_dir, script_name, timeout=45):
#     """Wait for download and move file to organized location"""
#     print("Waiting for download to complete...")
#     # Wait for download to complete
#     end_time = time.time() + timeout
#     latest_file = None
    
#     while time.time() < end_time:
#         # Find newest CSV file in download directory
#         files = glob.glob(os.path.join(DOWNLOAD_DIR, "*.csv"))
#         if files:
#             # Get the most recent file
#             candidate = max(files, key=os.path.getctime)
            
#             # Check if file is complete (no .part extension and not 0 bytes)
#             if not os.path.exists(candidate + '.part') and os.path.getsize(candidate) > 1024:  # 1KB min size
#                 latest_file = candidate
#                 break
#         time.sleep(2)
    
#     if not latest_file:
#         print("‚ùå No downloaded file found")
#         return False
    
#     # Create output directory
#     os.makedirs(combo_dir, exist_ok=True)
    
#     # Move and rename file
#     timestamp = int(time.time())
#     new_filename = f"{script_name}_report_{timestamp}.csv"
#     target_path = os.path.join(combo_dir, new_filename)
    
#     # Ensure target directory exists
#     os.makedirs(os.path.dirname(target_path), exist_ok=True)
    
#     # Move file with retries
#     for i in range(3):
#         try:
#             shutil.move(latest_file, target_path)
#             print(f"üíæ Report saved to: {target_path}")
#             return True
#         except Exception as e:
#             print(f"‚ö†Ô∏è File move failed (attempt {i+1}/3): {e}")
#             time.sleep(2)
    
#     return False

# def remove_all_indicators(driver, timeout=15):
#     print("Removing all indicators...")
#     try:
#         wait = WebDriverWait(driver, timeout)

#         # Open the settings menu
#         settings_btn = wait.until(EC.element_to_be_clickable(
#             (By.CSS_SELECTOR, "div[data-name='chart-settings-button']")
#         ))
#         settings_btn.click()
#         time.sleep(1)

#         # Open the "Object Tree" panel
#         object_tree_btn = wait.until(EC.element_to_be_clickable(
#             (By.XPATH, "//div[contains(@class, 'menu-item')]//div[text()='Object Tree']")
#         ))
#         object_tree_btn.click()
#         time.sleep(1)

#         # Click "Remove All Indicators"
#         remove_all = wait.until(EC.element_to_be_clickable(
#             (By.XPATH, "//div[text()='Remove All Indicators']")
#         ))
#         remove_all.click()
#         print("üßπ Removed all indicators from chart")
#         time.sleep(1)
#         return True

#     except Exception as e:
#         print(f"‚ùå Failed to remove indicators: {e}")
#         return False

# def main():
#     driver = setup_browser()
#     wait = WebDriverWait(driver, 30)
#     actions = ActionChains(driver)  # Create actions instance here
    
#     try:
#         driver.get(TRADINGVIEW_URL)
#         print("Loaded TradingView")
        
#         # Wait for page to fully load
#         wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "div.chart-container")))
#         time.sleep(3)  # Additional time for page initialization
        
#         scripts = load_scripts(SCRIPTS_DIR)
#         if not scripts:
#             print("No scripts found. Exiting.")
#             return
            
#         print(f"Found {len(scripts)} scripts to process")
        
#         for script_path in scripts:
#             script_name = os.path.splitext(os.path.basename(script_path))[0]
#             print(f"\nProcessing script: {script_name}")
            
#             with open(script_path, 'r', encoding='utf-8') as f:
#                 base_code = f.read()
#                 print(f"Loaded script (length: {len(base_code)} characters)")

#             for tp, sl in TP_SL_COMBINATIONS:
#                 print(f"\nüîÑ [{script_name}] Testing TP={tp}, SL={sl}")
                
#                 # Remove previous indicators
#                 if not remove_all_indicators(driver):
#                     print("Skipping due to cleanup failure")
#                     continue
                
#                 # Process strategy
#                 code = modify_code(base_code, tp, sl)
#                 print("Modified code with parameters")
                
#                 # Open editor and paste code
#                 textarea = open_pine_editor(driver, wait)
#                 paste_code(textarea, code, actions)
                
#                 # Save and add to chart
#                 save_and_add_to_chart(driver, actions)
                
#                 # Generate report
#                 print("Generating performance report...")
#                 try:
#                     generate_btn = wait.until(EC.element_to_be_clickable(
#                         (By.XPATH, "//span[text()='Generate report']")
#                     ))
#                     generate_btn.click()
                    
#                     # Wait for report generation
#                     wait.until(EC.visibility_of_element_located(
#                         (By.CSS_SELECTOR, "div.report-performance-summary")
#                     ))
#                     print("‚úÖ Report generated")
#                     time.sleep(2)  # Let report stabilize
#                 except Exception as e:
#                     print(f"‚ùå Failed to generate report: {e}")
#                     continue
                
#                 # Create output directory path
#                 combo_dir = os.path.join(OUTPUT_BASE_DIR, f"TP{tp}_SL{sl}", script_name)
#                 print(f"Saving results to: {combo_dir}")
                
#                 # Export and save report
#                 export_success = export_strategy_report(driver, combo_dir, script_name)
#                 if export_success:
#                     print(f"‚úÖ Exported report for TP={tp}, SL={sl}")
#                 else:
#                     print(f"‚ö†Ô∏è Export failed for TP={tp}, SL={sl}")

#         print("\n‚úÖ All reports exported and organized")

#     except Exception as e:
#         print(f"\n‚ùå Critical error: {e}")
#         import traceback
#         traceback.print_exc()
#     finally:
#         print("Closing browser")
#         try:
#             driver.quit()
#         except:
#             pass

# if __name__ == "__main__":
#     main()














# import os
# import time
# import csv
# import pyperclip
# import shutil
# import glob
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.common.keys import Keys
# from selenium.webdriver.common.action_chains import ActionChains
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.edge.service import Service
# from selenium.webdriver.edge.options import Options

# TP_SL_COMBINATIONS = [
#     (5, 5),
#     (10, 5),
#     (15, 10),
# ]

# OUTPUT_BASE_DIR = os.path.abspath("reports")
# DOWNLOAD_DIR = os.path.abspath("downloads")
# os.makedirs(DOWNLOAD_DIR, exist_ok=True)
# os.makedirs(OUTPUT_BASE_DIR, exist_ok=True)

# DRIVER_PATH = r"D:\edgedriver_win64\msedgedriver.exe"
# EDGE_BINARY = r"C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe"
# PROFILE_DIR = r"D:\Internship data\New folder\super_mirror\edge_profile"
# SCRIPTS_DIR = os.path.abspath("scripts")
# TRADINGVIEW_URL = "https://www.tradingview.com/chart"
# DROPDOWN_XPATH = "/html/body/div[2]/div/div[7]/div[2]/div[4]/div/div/div/div[1]/div[1]/div"
# EXPORT_DATA_XPATH = "/html/body/div[6]/div[2]/div/div/div/div[1]/div/div[2]/div/div[3]/div/div"
# os.makedirs(DOWNLOAD_DIR, exist_ok=True)

# def setup_browser():
#     options = Options()
#     options.binary_location = EDGE_BINARY
#     options.add_argument("--disable-blink-features=AutomationControlled")
#     options.add_argument("--start-maximized")
#     options.add_argument(f"--user-data-dir={PROFILE_DIR}")
#     options.add_experimental_option("excludeSwitches", ["enable-automation"])
#     prefs = {
#         "download.default_directory": DOWNLOAD_DIR,
#         "download.prompt_for_download": False,
#         "download.directory_upgrade": True,
#         "safebrowsing.enabled": True
#     }
#     options.add_experimental_option("prefs", prefs)
#     return webdriver.Edge(service=Service(DRIVER_PATH), options=options)

# def load_scripts(directory):
#     if not os.path.isdir(directory):
#         raise FileNotFoundError(f"Scripts directory '{directory}' does not exist.")
#     return sorted([os.path.join(directory, f) for f in os.listdir(directory) if f.endswith(".txt")])

# def open_pine_editor(driver, wait):
#     print("Opening Pine Editor...")
#     editor_elements = driver.find_elements(By.CSS_SELECTOR, "div.monaco-editor")
#     visible_editors = [e for e in editor_elements if e.is_displayed()]
#     if visible_editors:
#         editor_div = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "div.monaco-editor")))
#         editor_div.click()
#         return editor_div.find_element(By.TAG_NAME, "textarea")
#     else:
#         pine_tab = wait.until(EC.element_to_be_clickable((By.XPATH, "//span[text()='Pine Editor']")))
#         pine_tab.click()
#         time.sleep(2)
#         editor_div = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "div.monaco-editor")))
#         editor_div.click()
#         return editor_div.find_element(By.TAG_NAME, "textarea")

# def modify_code(code, tp, sl):
#     return code.replace("{{TP}}", str(tp)).replace("{{SL}}", str(sl))

# def paste_code(textarea, code, actions):
#     textarea.send_keys(Keys.CONTROL, 'a')
#     textarea.send_keys(Keys.BACKSPACE)
#     pyperclip.copy(code)
#     actions.key_down(Keys.CONTROL).send_keys('v').key_up(Keys.CONTROL).perform()
#     time.sleep(0.5)

# def save_and_add_to_chart(actions):
#     print("Pressing Ctrl + Enter to compile...")
#     actions.key_down(Keys.CONTROL).send_keys(Keys.ENTER).key_up(Keys.CONTROL).perform()
#     time.sleep(2)

# def export_strategy_report(driver, combo_dir, script_name, timeout=30):
#     """Export report using provided XPaths and save to organized location"""
#     wait = WebDriverWait(driver, timeout)
    
#     try:
#         # 1. Click dropdown
#         dropdown = wait.until(EC.element_to_be_clickable((By.XPATH, DROPDOWN_XPATH)))
#         driver.execute_script("arguments[0].scrollIntoView(true);", dropdown)
#         driver.execute_script("arguments[0].click();", dropdown)
#         print("‚úÖ Strategy dropdown clicked")
#         time.sleep(1.5)  # Allow menu animation

#         # 2. Click export data option
#         export_option = wait.until(EC.element_to_be_clickable((By.XPATH, EXPORT_DATA_XPATH)))
#         driver.execute_script("arguments[0].click();", export_option)
#         print("‚úÖ Export data option clicked")
#         time.sleep(2)  # Allow dialog to appear

#         # 3. Confirm export in dialog
#         confirm_btn = wait.until(EC.element_to_be_clickable(
#             (By.XPATH, "//button[.//span[text()='Export']]")
#         ))
#         confirm_btn.click()
#         print("‚úÖ Export confirmed")
        
#         # 4. Wait for download and move file
#         time.sleep(3)  # Initial pause for download start
#         return move_downloaded_file(combo_dir, script_name)
        
#     except Exception as e:
#         print(f"‚ùå Export failed: {e}")
#         driver.save_screenshot(os.path.join(combo_dir, f"export_error_{int(time.time())}.png"))
#         return False

# def move_downloaded_file(combo_dir, script_name, timeout=30):
#     """Wait for download and move file to organized location"""
#     # Wait for download to complete
#     end_time = time.time() + timeout
#     latest_file = None
    
#     while time.time() < end_time:
#         # Find newest CSV file in download directory
#         files = glob.glob(os.path.join(DOWNLOAD_DIR, "*.csv"))
#         if files:
#             candidate = max(files, key=os.path.getctime)
            
#             # Check if file is complete (no .part extension)
#             if not os.path.exists(candidate + '.part') and os.path.getsize(candidate) > 0:
#                 latest_file = candidate
#                 break
#         time.sleep(1)
    
#     if not latest_file:
#         print("‚ùå No downloaded file found")
#         return False
    
#     # Create output directory
#     os.makedirs(combo_dir, exist_ok=True)
    
#     # Move and rename file
#     new_filename = f"{script_name}_report_{int(time.time())}.csv"
#     target_path = os.path.join(combo_dir, new_filename)
#     shutil.move(latest_file, target_path)
#     print(f"üíæ Report saved to: {target_path}")
#     return True

    
# def remove_all_indicators(driver, timeout=10):
#     from selenium.webdriver.common.by import By
#     from selenium.webdriver.support.ui import WebDriverWait
#     from selenium.webdriver.support import expected_conditions as EC

#     try:
#         wait = WebDriverWait(driver, timeout)

#         # Open the "Object Tree" panel to see all indicators
#         settings_btn = wait.until(EC.element_to_be_clickable(
#             (By.XPATH, "//div[@data-name='pane-toolbar']//div[@data-name='show-object-tree']")))
#         settings_btn.click()

#         # Wait and then click "Remove All Indicators"
#         remove_all = wait.until(EC.element_to_be_clickable(
#             (By.XPATH, "//div[text()='Remove All Indicators']")))
#         remove_all.click()

#         print("üßπ Removed all indicators from chart")
#         return True

#     except Exception as e:
#         print(f"‚ùå Failed to remove indicators: {e}")
#         return False



# def main():
#     driver = setup_browser()  # Your existing setup function
#     wait = WebDriverWait(driver, 30)
    
#     try:
#         scripts = load_scripts(SCRIPTS_DIR)  # Your existing script loader
        
#         for script_path in scripts:
#             script_name = os.path.splitext(os.path.basename(script_path))[0]
            
#             with open(script_path, 'r') as f:
#                 base_code = f.read()

#             for tp, sl in TP_SL_COMBINATIONS:
#                 print(f"\nüîÑ [{script_name}] TP={tp}, SL={sl}")
#                 remove_all_indicators(driver)  # Your existing cleanup function
                
#                 # Process strategy (your existing code)
#                 code = modify_code(base_code, tp, sl)
#                 textarea = open_pine_editor(driver, wait)
#                 paste_code(textarea, code, actions)
#                 save_and_add_to_chart(actions)
                
#                 # Generate report
#                 wait.until(EC.element_to_be_clickable(
#                     (By.XPATH, "//span[text()='Generate report']")
#                 )).click()
#                 time.sleep(3)  # Let report generate
                
#                 # Create output directory path
#                 combo_dir = os.path.join(OUTPUT_BASE_DIR, f"TP{tp}_SL{sl}", script_name)
                
#                 # Export and save report
#                 export_success = export_strategy_report(driver, combo_dir, script_name)
#                 if not export_success:
#                     print(f"‚ö†Ô∏è Export failed for TP={tp}, SL={sl}")

#         print("\n‚úÖ All reports exported and organized")

#     finally:
#         driver.quit()

# if __name__ == "__main__":
#     main()